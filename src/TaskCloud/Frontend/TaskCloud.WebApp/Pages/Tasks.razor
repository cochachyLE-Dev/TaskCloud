@page "/tasks"
@using TaskCloud.WebApp.Models.Enum
@inject ILogger<Tasks> Logger
@inject IJSRuntime JS

<PageTitle>Weather</PageTitle>

<h1>Tasks</h1>

<nav class="nav">
    <div class="nav-item flex-column">        
        <Button Color="Color.Primary" Clicked="@ShowModal">New Taks</Button>
    </div>
</nav>

<DataGrid TItem="Models.Task"
          Data="tasks"
          Sortable
          SortMode="DataGridSortMode.Single"
          ShowPager
          ShowPageSizes
          Resizable
          Responsive
          Bordered
          Hoverable
          Narrow          
          @bind-SelectedRow="selectedTask"
          ShowGrouping
          ResizeMode="TableResizeMode.Columns">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(Models.Task.Title)" Caption="Title"></DataGridColumn>
        <DataGridColumn Field="@nameof(Models.Task.Description)" Caption="Description"></DataGridColumn>
        <DataGridColumn Field="@nameof(Models.Task.Priority)" Caption="Priority">
            <DisplayTemplate>
                <Select TValue="Priority" @bind-SelectedValue="@context.Priority">
                    @foreach (var priority in priority)
                    {
                        <SelectItem Value="@priority">@priority</SelectItem>
                    }
                </Select>
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(Models.Task.DueDate)" Caption="Due Date"></DataGridColumn>
        <DataGridColumn Field="@nameof(Models.Task.Status)" Caption="Status">
            <DisplayTemplate>
                <Select TValue="Status" @bind-SelectedValue="@context.Status">
                    @foreach (var status in status)
                    {
                        <SelectItem Value="@status">@status</SelectItem>   
                    }
                </Select>
            </DisplayTemplate>
        </DataGridColumn>        
        <DataGridColumn Field="@nameof(Models.Task.Progress)" Caption="Progress">
            <DisplayTemplate>
                <Progress Min="0" Max="100" Value="@context.Progress" Color="Color.Primary">
                    <ProgressBar Value="@context.Progress"></ProgressBar>
                </Progress>
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(Models.Task.IsProject)" Caption="Actions" Width="144">
            <DisplayTemplate>
                <Button Color="@(context.IsProject ? Color.Light: Color.Info)" Clicked="@ShowModal"> @(context.IsProject ? "Show Project " : "Create project")</Button>
                <Button Color="Color.Primary" Clicked="@ShowModal">Edit</Button>
                <Button Color="Color.Danger">Delete</Button>
            </DisplayTemplate>
        </DataGridColumn>        
        <DataGridCommandColumn PreventRowClick>
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button Color="Color.Warning" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
</DataGrid>

@if (selectedTab != null)
{
    @if (selectedTask.IsProject)
    {
        <Tabs SelectedTab="comments" SelectedTabChanged="@OnSelectedTabChanged">
            <Items>                
                <Tab Name="comments">Comments</Tab>        
            </Items>
            <Content>
                <TabPanel Name="comments">
                    Content for comment
                </TabPanel>        
            </Content>
        </Tabs>
    }else
    {
        <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
            <Items>
                <Tab Name="sub-tasks">Sub Tasks</Tab>
                <Tab Name="comments2">Comments</Tab>
            </Items>
            <Content>
                <TabPanel Name="sub-tasks">
                    <DataGrid TItem="Models.Task"
                              Data="selectedTask.SubTasks"
                              Sortable
                              SortMode="DataGridSortMode.Single"
                              ShowPager
                              ShowPageSizes
                              Resizable
                              Responsive
                              Bordered
                              Hoverable
                              Narrow
                              SelectedRow="selectedTask"
                              ShowGrouping
                              ResizeMode="TableResizeMode.Columns">
                        <DataGridColumns>
                            <DataGridColumn Field="@nameof(Models.Task.Title)" Caption="Title"></DataGridColumn>
                            <DataGridColumn Field="@nameof(Models.Task.Description)" Caption="Description"></DataGridColumn>
                            <DataGridColumn Field="@nameof(Models.Task.Priority)" Caption="Priority">
                                <DisplayTemplate>
                                    <Select TValue="Priority" @bind-SelectedValue="@context.Priority">
                                        @foreach (var priority in priority)
                                        {
                                            <SelectItem Value="@priority">@priority</SelectItem>
                                        }
                                    </Select>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(Models.Task.DueDate)" Caption="Due Date"></DataGridColumn>
                            <DataGridColumn Field="@nameof(Models.Task.Status)" Caption="Status">
                                <DisplayTemplate>
                                    <Select TValue="Status" @bind-SelectedValue="@context.Status">
                                        @foreach (var status in status)
                                        {
                                            <SelectItem Value="@status">@status</SelectItem>
                                        }
                                    </Select>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Field="@nameof(Models.Task.Progress)" Caption="Progress">
                                <DisplayTemplate>
                                    <Progress Min="0" Max="100" Value="@context.Progress" Color="Color.Primary">
                                        <ProgressBar Value="@context.Progress"></ProgressBar>
                                    </Progress>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Caption="Actions" Width="144">
                                <DisplayTemplate>
                                    <Button Color="Color.Primary" Clicked="@ShowModal">Edit</Button>
                                    <Button Color="Color.Danger">Delete</Button>
                                </DisplayTemplate>
                            </DataGridColumn>
                        </DataGridColumns>
                    </DataGrid>
                </TabPanel>
                <TabPanel Name="comments2">
                    Content for comment
                </TabPanel>        
            </Content>
        </Tabs>        
    }
}

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Task edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Title</FieldLabel>
                <TextEdit Placeholder="Enter title..." @bind-Text="@selectedTask.Title" />
            </Field>
            <Field>
                <FieldLabel>Description</FieldLabel>
                <MemoEdit Placeholder="Enter description..." />
            </Field>
            <Field>
                <FieldLabel>Priority</FieldLabel>
                <Select TValue="Priority" @bind-SelectedValue="@selectedTask.Priority">
                    @foreach (var priority in priority)
                    {
                        <SelectItem Value="@priority">@priority</SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel>Due Date</FieldLabel>
                <DateEdit TValue="DateTime" @bind-Date="@selectedTask.DueDate" />
            </Field>
            <Field>
                <FieldLabel>Status</FieldLabel>
                <Select TValue="Status" @bind-SelectedValue="@selectedTask.Status">
                    @foreach (var status in status)
                    {
                        <SelectItem Value="@status">@status</SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel>Progress</FieldLabel>
                <NumericEdit @bind-Value="@selectedTask.Progress" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@HideModal">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {        
    private string[] status = Enum.GetNames(typeof(Status));
    private string? selectedStatus;

    private string[] priority = Enum.GetNames(typeof(Priority));
    private string? selectedPriority;

    private List<Models.Task>? tasks = default!;

    private Models.Task selectedTask = new();    

    private async Task EditTaskAsync(Models.Task task)
    {        
        await ShowModal();
    }

    private async Task UpdateTaskAsync(Models.Task updateTask)
    {
        var task = tasks!.Single(x => x.Id == updateTask.Id);
        task.Description = updateTask.Description + "update";        

        await HideModal();
    }

    private void DeleteTaskAsync(Models.Task taks)
    {
        // var confirmation = await dialog.ShowAsync(
        //     title: "Are you sure you want to delete this?",
        //     message1: "This will delete the record. Once deleted can not be rolled back.",
        //     message2: "Do you want to proceed?");

        // if (confirmation)
        // {            
        //     tasks!.Remove(taks);
            
        // }
        // else
        // {
        //     // do whatever
        // }
    }    

    string selectedTab = "sub-tasks";

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }

    private Modal modalRef = default!;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    protected override void OnInitialized()
    {
        if (tasks is null)
            tasks = Seeds.Tasks.GetData().ToList();
    }
}
