@page "/tasks"
@implements IAsyncDisposable
@inject ILogger<Tasks> Logger
@inject IJSRuntime JS
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Tasks</h1>

<nav class="nav">
    <div class="nav-item flex-column">
        <NavLink class="nav-link" href="/tasks/create">
            New Taks
        </NavLink>
    </div>
    <div class="nav-item flex-column">
        <NavLink class="nav-link" href="/tasks/delete">
            Delete
        </NavLink>
    </div>
</nav>


@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="split-container">
        <div class="pane top-pane">
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Priority</th>
                            <th>Due Date</th>
                            <th>Status</th>
                            <th>Assigned User</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var t in tasks)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" @bind-value="t.IsSelected" />
                                </td>
                                <td>@t.Title</td>
                                <td>@t.Description</td>
                                <td>
                                    <InputSelect @bind-Value="t.Priority">
                                        @foreach (var item in priority)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td>@t.DueDate.ToShortDateString()</td>
                                <td>
                                    <InputSelect @bind-Value="t.Status">
                                        @foreach (var item in status)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td>
                                    @t.AssignedUser?.Username
                                </td>
                                <td>
                                    <NavLink class="nav-link" href="/tasks/edit/1">
                                        edit
                                    </NavLink>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="resizer"></div>
        <div class="pane bottom-pane">
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Priority</th>
                            <th>Due Date</th>
                            <th>Status</th>
                            <th>Assigned User</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var t in tasks)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" @bind-value="t.IsSelected" />
                                </td>
                                <td>@t.Title</td>
                                <td>@t.Description</td>
                                <td>
                                    <InputSelect @bind-Value="t.Priority">
                                        @foreach (var item in priority)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td>@t.DueDate.ToShortDateString()</td>
                                <td>
                                    <InputSelect @bind-Value="t.Status">
                                        @foreach (var item in status)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td>
                                    @t.AssignedUser?.Username
                                </td>
                                <td>
                                    <NavLink class="nav-link" href="/tasks/edit/1">
                                        edit
                                    </NavLink>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private IJSObjectReference? module;
    private string[] status = Enum.GetNames(typeof(Components.Enum.Status));
    private string? selectedStatus;

    private string[] priority = Enum.GetNames(typeof(Components.Enum.Priority));
    private string? selectedPriority;

    private Models.Task[]? tasks;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("OnAfterRenderAsync: firstRender");

            module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Pages/Tasks.razor.js");

            await module.InvokeVoidAsync("Tasks.InitializeComponent");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync");

        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        tasks = Seeds.Tasks.GetData().ToArray();
    }   
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
